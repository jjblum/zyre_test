// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MSGSCHEMA_MESSAGES_H_
#define FLATBUFFERS_GENERATED_MSGSCHEMA_MESSAGES_H_

#include "flatbuffers/flatbuffers.h"

namespace Messages {

struct Message;

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ACTION = 4,
    VT_TIMESTAMP = 6,
    VT_JSON = 8
  };
  const flatbuffers::String *action() const {
    return GetPointer<const flatbuffers::String *>(VT_ACTION);
  }
  int64_t timestamp() const {
    return GetField<int64_t>(VT_TIMESTAMP, 0);
  }
  const flatbuffers::String *json() const {
    return GetPointer<const flatbuffers::String *>(VT_JSON);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ACTION) &&
           verifier.Verify(action()) &&
           VerifyField<int64_t>(verifier, VT_TIMESTAMP) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_JSON) &&
           verifier.Verify(json()) &&
           verifier.EndTable();
  }
};

struct MessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_action(flatbuffers::Offset<flatbuffers::String> action) {
    fbb_.AddOffset(Message::VT_ACTION, action);
  }
  void add_timestamp(int64_t timestamp) {
    fbb_.AddElement<int64_t>(Message::VT_TIMESTAMP, timestamp, 0);
  }
  void add_json(flatbuffers::Offset<flatbuffers::String> json) {
    fbb_.AddOffset(Message::VT_JSON, json);
  }
  MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MessageBuilder &operator=(const MessageBuilder &);
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_, 3);
    auto o = flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> action = 0,
    int64_t timestamp = 0,
    flatbuffers::Offset<flatbuffers::String> json = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_json(json);
  builder_.add_action(action);
  return builder_.Finish();
}

inline flatbuffers::Offset<Message> CreateMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *action = nullptr,
    int64_t timestamp = 0,
    const char *json = nullptr) {
  return Messages::CreateMessage(
      _fbb,
      action ? _fbb.CreateString(action) : 0,
      timestamp,
      json ? _fbb.CreateString(json) : 0);
}

inline const Messages::Message *GetMessage(const void *buf) {
  return flatbuffers::GetRoot<Messages::Message>(buf);
}

inline bool VerifyMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Messages::Message>(nullptr);
}

inline void FinishMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Messages::Message> root) {
  fbb.Finish(root);
}

}  // namespace Messages

#endif  // FLATBUFFERS_GENERATED_MSGSCHEMA_MESSAGES_H_
